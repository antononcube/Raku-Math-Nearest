use v6.d;
use Test;

use lib <. lib>;

use Math::Nearest::Scan;
use Math::DistanceFunctions;

plan *;

my @points = ([(^100).rand, (^100).rand] xx 100).unique;

## 1
my $finder1;
$finder1 = Math::Nearest::Scan.new(@points);
isa-ok $finder1, Math::Nearest::Scan:D;

## 2
my @searchPoint1 = |@points.head;
is-deeply $finder1.k-nearest(@searchPoint1).map({ $_<point>.value }).Array, [@searchPoint1,];

## 3
my $radius3 = 12;
my @inBall3 = @points.grep({ euclidean-distance($_, @searchPoint1) â‰¤ $radius3 }).sort.Array;
is-deeply $finder1.nearest-within-ball(@searchPoint1, $radius3).map({ $_<point>.value }).sort.Array, @inBall3;

## 4
# Make verification test with direct scanning of @points.
my @nns6 = |@points.sort({ sqrt [+] ($_.Array Z- @searchPoint1).map(* ** 2) });
is-deeply $finder1.k-nearest(@searchPoint1, 12).map({ $_<point>.value }), @nns6[^12];

done-testing;
